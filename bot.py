import logging
import openai
import os
from aiogram import Bot, Dispatcher, executor, types
import asyncio
from dotenv import load_dotenv

load_dotenv()

# üîê –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render
API_TOKEN = os.getenv("TG_BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
CHANNEL_ID = "@One_win_Aviator_Profit"
ADMIN_IDS = [1463957271, 483673956]

openai.api_key = OPENAI_KEY
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ —Ö–∏–Ω–¥–∏ (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π) –≤ —Å—Ç–∏–ª–µ Aviator
async def generate_hindi_post():
    prompt = (
        "Generate a short Telegram post in Hindi (Latin script) for Aviator betting channel. "
        "Include excitement, emotional wins, note that admin earns daily, and encourages others to join. "
        "Use 2 emojis and end with '‡§≤‡§ø‡§ñ‡•ã ‡§Æ‡•Å‡§ù‡•á @Emiway_Ban'"
    )
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response["choices"][0]["message"]["content"].strip()

# üì≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–æ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
@dp.message_handler(commands=["panel"])
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üì§ –ü–æ—Å—Ç —Å–µ–π—á–∞—Å", callback_data="post_now"))
    await message.answer("üì≤ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "post_now")
async def post_now(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMIN_IDS:
        return
    post = await generate_hindi_post()
    await bot.send_message(CHANNEL_ID, post)
    await bot.answer_callback_query(callback_query.id, text="‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")

# üîÅ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
async def periodic_posting():
    while True:
        post = await generate_hindi_post()
        await bot.send_message(CHANNEL_ID, post)
        await asyncio.sleep(1800)

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(periodic_posting())
    executor.start_polling(dp, skip_updates=True)
